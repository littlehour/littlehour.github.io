一、指令：
    指令可以是DOM元素里面的一个属性(attribute)、元素(element)、注释(comment)、CSS类(CSS class)。一个指令会告知Angularjs的HTML编译器($compile)，给使用指令的DOM元素附加一个具体的行为(例如通过事件监听)，
或者转换DOM元素和他的子元素。Angularjs有一些内置的指令，像：ngBind、ngModel和ngClass。像创建控制器和服务一样，你可以创建自定义的angularjs指令来供使用。当angularjs初始化你的应用时，HTML compile会遍历DOM
树，匹配指令到相应的DOM元素。对于angularjs来说，"compilation"意味着给html附加指令，让他可以交互。
    匹配指令：和元素匹配选择器一样，当指令是元素的部分声明时，则可以说元素匹配这个指令。

    指令正规化：angularjs规范一个元素标签和属性名来决定那个元素匹配那个指令。指令的正规化过程：
    1、忽略元素和属性名的x-和data-前缀。
    2、转换：，-，_这些分隔符为驼峰形式。
    最好使用-分割形式，如果你想使用HTML验证工具，你可以使用data-前缀。另外的格式是合法的，但不建议使用。

    指令类型：$compile可以以元素名(E)，属性(A)，类名(C)和注释(M)为基础来匹配指令。在指令定义对象中，可以使用restrict来声明指令的类型，默认是EA。最好使用标签类和属性类指令，这样更容易决定某个元素匹配什么指令。
    注释指令普遍使用在DOM API限制创建指令的地方。

    创建指令：像注册控制器一样，指令注册在module上，module.directive接收一个规范的指令名（驼峰式）和一个factory函数最为参数。factory函数应该返回一个有各种选项的对象来告诉$compile，当指令匹配时，应该有什么行为。
    factory函数只会在compile匹配指令时调用一次，因此你可以在哪里面进行一些初始化工作，这个函数使用$injector.invoke调用，因此他像控制器一样是可以注入的。自定义的指令最好加上一个不会与将来的html产生冲突的前缀。

    指令选项：
    1、template：当一个模板在很多地方被使用时，可以为其创建一个指令。在这个选项里，你可以组合一些另外的指令像绑定{{expression}}。这个选项适用模板比较小的时候，值为一个模板字符串。
    2、templateUrl：引用一个html文件作为模板。他的值可以是一个返回HTML模板文件URL的函数，这个函数接收两个参数，与指令相关的元素和元素的属性对象，你无法在该函数中访问作用域变量，因为模板的请求先于作用域的初始化。
    3、restrict：有四个值，A、E、C、M，默认为AE。

